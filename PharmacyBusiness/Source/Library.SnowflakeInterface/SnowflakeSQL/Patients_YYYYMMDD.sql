SELECT *
FROM (
		SELECT PATIENT.PD_PATIENT_NUM "PATIENT_NUM",
				PATIENT.PD_TITLE_ABBR "TITLE_ABBR",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(PATIENT.PD_FIRST_NAME,'[,^<>|]','')),1,30) "FIRST_NAME",
				PATIENT.PD_MIDDLE_NAME "M_INITIAL",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(PATIENT.PD_LAST_NAME,'[,^<>|]','')),1,30) "LAST_NAME",
				PATIENT.PD_NAME_SUFFIX_ABBR "SUFFIX_ABBR",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(AUDPATIENT.PREFERRED_NAME,'[,^<>|]','')),1,30) "PREFERRED_NAME",
				TRUNC(((SYSDATE() - PATIENT.PD_BIRTH_DATE)/1461)*4, 'DAY') "PT_AGE",
				CASE WHEN
				(TO_NUMBER(TO_CHAR(PATIENT.PD_BIRTH_DATE,  'DDD'))-TO_NUMBER(TO_CHAR(SYSDATE(), 'DDD'))<0)
				THEN
				(366+TO_NUMBER(TO_CHAR(PATIENT.PD_BIRTH_DATE,  'DDD'))-TO_NUMBER(TO_CHAR(SYSDATE(), 'DDD')))
				ELSE
				TO_NUMBER(TO_CHAR(PATIENT.PD_BIRTH_DATE,  'DDD'))-TO_NUMBER(TO_CHAR(SYSDATE(), 'DDD'))+1
				END "NEXT_BDAY",
				TO_NUMBER(TO_CHAR(PATIENT.PD_BIRTH_DATE::DATE,'YYYYMMDD')) "DOB",
				TO_NUMBER(TO_CHAR(PATIENT.PD_DATE_OF_DEATH::DATE,'YYYYMMDD')) "DATE_OF_DEATH",

				PATIENT.PD_STATUS "PT_STATUS",
        
				PATIENT.PD_INACTIVE_REASON "INACTIVE_REASON",
				PATIENT.PD_MERGED_TO_PATIENT_NUM "MERGE_PATIENT_NUM",
				PATIENTDEMO.GENDER "PT_GENDER",
        
				PATIENT.PD_PARENT_GUARDIAN_NAME "PARENT_GUARDIAN",
				PATIENT.PD_SPECIES_NAME "PET_SPECIES",
				PATIENT.PD_OWNER_NAME "PET_OWNER",
				TO_NUMBER(TO_CHAR(PATIENT.PD_CREATE_DT::DATE,'YYYYMMDD')) "PT_CREATE_DATE",
				DWFACILITY.FD_FACILITY_ID "CREATE_STORE_NUM",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(AUDPATIENT.NDC_PREFERENCES),1,800) "NDC_PREF",

				PHONE_CELL.PATP_AREA_CODE "AREA_CODE_CELL",
				SUBSTR(PHONE_CELL.PATP_PHONE_NUMBER,1,3)||'-'||SUBSTR(PHONE_CELL.PATP_PHONE_NUMBER,4,4) "PHONE_NUM_CELL",
				PHONE_CELL.PATP_EXT "PHONE_EXT_CELL",
        
				PHONE_ALTONE.PATP_AREA_CODE "AREA_CODE_ALT1",
				SUBSTR(PHONE_ALTONE.PATP_PHONE_NUMBER,1,3)||'-'||SUBSTR(PHONE_ALTONE.PATP_PHONE_NUMBER,4,4) "PHONE_NUM_ALT1",
				PHONE_ALTONE.PATP_EXT "PHONE_EXT_ALT1",
        
				PHONE_ALTTWO.PATP_AREA_CODE "AREA_CODE_ALT2",
				SUBSTR(PHONE_ALTTWO.PATP_PHONE_NUMBER,1,3)||'-'||SUBSTR(PHONE_ALTTWO.PATP_PHONE_NUMBER,4,4) "PHONE_NUM_ALT2",
				PHONE_ALTTWO.PATP_EXT "PHONE_EXT_ALT2",
        
				PHONE_ALTTHREE.PATP_AREA_CODE "AREA_CODE_ALT3",
				SUBSTR(PHONE_ALTTHREE.PATP_PHONE_NUMBER,1,3)||'-'||SUBSTR(PHONE_ALTTHREE.PATP_PHONE_NUMBER,4,4) "PHONE_NUM_ALT3",
				PHONE_ALTTHREE.PATP_EXT "PHONE_EXT_ALT3",

				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(PATIENT.PATIENT_EMAIL),1,100) "EMAIL1",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(PATIENT.PATIENT_EMAIL2),1,100) "EMAIL2",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(PATIENT.PATIENT_EMAIL3),1,100) "EMAIL3",
        
				DECODE(PATIENTOPT.CENTRAL_FILL_OPTION,'N',0,1)"CF_OPTION",
				DECODE(PATIENTOPT.MAIL_ORDER_OPTION,'N',0,1) "MAIL_OPTION",
				DECODE(PATIENTOPT.TARGETED_MARKETING_OPTION,'Y',1,0) "EXCLUDE_MARKETING",
				DECODE(PATIENTOPT.AUTO_NOTIFY_OPTION,'N',0,1) "AUTO_NOTIFY_OPT",
				DECODE(PATIENTOPT.AUTO_REFILL_OPTION,'N',0,1) "AUTO_REFILL_OPT",
				ROUND(PATIENT.PD_HEIGHT,2) "HEIGHT_CM",
				ROUND(PATIENT.PD_WEIGHT,2) "WEIGHT_KG",
				ROUND(PATIENT.PD_BODY_SURFACE_AREA,2) "BSA_MSQ",

				TO_NUMBER(TO_CHAR(PATIENT.PD_ERP_ENROLLMENT_STATUS_DATE::DATE,'YYYYMMDD')) "ERP_DATE",
				DECODE(PATIENT.PD_IS_ERP_AUTO_ENROLLED,'N',0,1) "ERP_ENROLLED",
        
				PATIENT.PD_DRIVERS_LICENSE "LICENSE_NUM",
				PATIENT.PD_DRIVERS_LICENSE_STATE "LICENSE_STATE",
				TO_NUMBER(TO_CHAR(PATIENT.PD_DRIVERS_LICENSE_EXP_DATE::DATE,'YYYYMMDD')) "LICENSE_EXPDATE",
				PATIENT.PD_PATIENT_ID "FREQ_SHOPPER_NUM",
				PATIENT.PD_OTHER_ID "OTHER_ID",
				PATIENT.PD_PATIENT_KEY "PATIENT_KEY",
				PATIENT.PD_PRESCRIBER_NUM "PCP_NUM",

				MEDCOND.MCD_MED_COND_REF_TYPE "MC_CODE_TYPE",
				MEDCOND.MCD_FRMTTD_COND_REF_NUM "MC_CODE",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(MEDCOND.MCD_DESCRIPTION),1,255) "MC_DESC",
				TO_NUMBER(TO_CHAR(PMB.PMB_REPORTED_DATE::DATE,'YYYYMMDD')) "MC_REPORTED_DATE",
				TO_NUMBER(TO_CHAR(PMB.PMB_BEGIN_EFFECTIVE_DT::DATE,'YYYYMMDD')) "MC_DATE_ADDED",
				TO_NUMBER(TO_CHAR(PMB.PMB_UPDATE_DT::DATE,'YYYYMMDD')) "MC_LAST_MODIFIED",
				TO_NUMBER(TO_CHAR(PMB.PMB_END_EFFECTIVE_DT::DATE,'YYYYMMDD')) "MC_DEACTIVATED_DATE",

				TO_NUMBER(SUBSTR(TO_CHAR(NVL(PATIENT.H_LEVEL,20070101)),1,8)) "LAST_UPDATE",
        
				FIRST_TP.TPD_CARDHOLDER_PATIENT_NUM "CARDHOLDER_PATIENT_NUM1",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIRST_TP.TPD_CARDHOLDER_ID,'[,^<>|]','')),1,20) "CARDHOLDER_ID1",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIRST_PLAN.BIN,'[,^<>|]','')),1,6) "BIN1",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIRST_PLAN.PCN,'[,^<>|]','')),1,10) "PCN1",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIRST_TP.TPD_BENEFIT_GROUP_ID,'[,^<>|]','')),1,15) "BENEFIT_GROUP_ID1",
				FIRST_PLAN.TPLD_PLAN_CODE "PLAN_CODE1",
				FIRST_PLAN.TPLD_PLAN_NAME "PLAN_NAME1",
				DECODE(FIRST_TP.TPD_RELATIONSHIP_NUM
									,1,'1=CARDHOLDER'
									,2,'2=SPOUSE'
									,3,'3=CHILD'
									,4,'4=OTHER'
									,0,'0=NOT SPECIFIED'
									,NULL) "RELATIONSHIP_CODE1",
				DECODE(FIRST_TP.TPD_USE_FOR_COB,'Y',1,0) "COB1",
        
				SEC_TP.TPD_CARDHOLDER_PATIENT_NUM "CARDHOLDER_PATIENT_NUM2",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SEC_TP.TPD_CARDHOLDER_ID,'[,^<>|]','')),1,20) "CARDHOLDER_ID2",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SEC_PLAN.BIN,'[,^<>|]','')),1,6) "BIN2",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SEC_PLAN.PCN,'[,^<>|]','')),1,10) "PCN2",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SEC_TP.TPD_BENEFIT_GROUP_ID,'[,^<>|]','')),1,15) "BENEFIT_GROUP_ID2",
				SEC_PLAN.TPLD_PLAN_CODE "PLAN_CODE2",
				SEC_PLAN.TPLD_PLAN_NAME "PLAN_NAME2",
				DECODE(SEC_TP.TPD_RELATIONSHIP_NUM
									,1,'1=CARDHOLDER'
									,2,'2=SPOUSE'
									,3,'3=CHILD'
									,4,'4=OTHER'
									,0,'0=NOT SPECIFIED'
									,NULL) "RELATIONSHIP_CODE2",
				DECODE(SEC_TP.TPD_USE_FOR_COB,'Y',1,0) "COB2",
        
				TRE_TP.TPD_CARDHOLDER_PATIENT_NUM "CARDHOLDER_PATIENT_NUM3",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(TRE_TP.TPD_CARDHOLDER_ID,'[,^<>|]','')),1,20) "CARDHOLDER_ID3",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(TRE_PLAN.BIN,'[,^<>|]','')),1,6) "BIN3",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(TRE_PLAN.PCN,'[,^<>|]','')),1,10) "PCN3",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(TRE_TP.TPD_BENEFIT_GROUP_ID,'[,^<>|]','')),1,15) "BENEFIT_GROUP_ID3",
				TRE_PLAN.TPLD_PLAN_CODE "PLAN_CODE3",
				TRE_PLAN.TPLD_PLAN_NAME "PLAN_NAME3",
				DECODE(TRE_TP.TPD_RELATIONSHIP_NUM
									,1,'1=CARDHOLDER'
									,2,'2=SPOUSE'
									,3,'3=CHILD'
									,4,'4=OTHER'
									,0,'0=NOT SPECIFIED'
									,NULL) "RELATIONSHIP_CODE3",
				DECODE(TRE_TP.TPD_USE_FOR_COB,'Y',1,0) "COB3",
        
				FOUR_TP.TPD_CARDHOLDER_PATIENT_NUM "CARDHOLDER_PATIENT_NUM4",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FOUR_TP.TPD_CARDHOLDER_ID,'[,^<>|]','')),1,20) "CARDHOLDER_ID4",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FOUR_PLAN.BIN,'[,^<>|]','')),1,6) "BIN4",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FOUR_PLAN.PCN,'[,^<>|]','')),1,10) "PCN4",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FOUR_TP.TPD_BENEFIT_GROUP_ID,'[,^<>|]','')),1,15) "BENEFIT_GROUP_ID4",
				FOUR_PLAN.TPLD_PLAN_CODE "PLAN_CODE4",
				FOUR_PLAN.TPLD_PLAN_NAME "PLAN_NAME4",
				DECODE(FOUR_TP.TPD_RELATIONSHIP_NUM
									,1,'1=CARDHOLDER'
									,2,'2=SPOUSE'
									,3,'3=CHILD'
									,4,'4=OTHER'
									,0,'0=NOT SPECIFIED'
									,NULL) "RELATIONSHIP_CODE4",
				DECODE(FOUR_TP.TPD_USE_FOR_COB,'Y',1,0) "COB4",
        
				FIVE_TP.TPD_CARDHOLDER_PATIENT_NUM "CARDHOLDER_PATIENT_NUM5",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIVE_TP.TPD_CARDHOLDER_ID,'[,^<>|]','')),1,20) "CARDHOLDER_ID5",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIVE_PLAN.BIN,'[,^<>|]','')),1,6) "BIN5",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIVE_PLAN.PCN,'[,^<>|]','')),1,10) "PCN5",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(FIVE_TP.TPD_BENEFIT_GROUP_ID,'[,^<>|]','')),1,15) "BENEFIT_GROUP_ID5",
				FIVE_PLAN.TPLD_PLAN_CODE "PLAN_CODE5",
				FIVE_PLAN.TPLD_PLAN_NAME "PLAN_NAME5",
				DECODE(FIVE_TP.TPD_RELATIONSHIP_NUM
									,1,'1=CARDHOLDER'
									,2,'2=SPOUSE'
									,3,'3=CHILD'
									,4,'4=OTHER'
									,0,'0=NOT SPECIFIED'
									,NULL) "RELATIONSHIP_CODE5",
				DECODE(FIVE_TP.TPD_USE_FOR_COB,'Y',1,0) "COB5",       

				SIX_TP.TPD_CARDHOLDER_PATIENT_NUM "CARDHOLDER_PATIENT_NUM6",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SIX_TP.TPD_CARDHOLDER_ID,'[,^<>|]','')),1,20) "CARDHOLDER_ID6",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SIX_PLAN.BIN,'[,^<>|]','')),1,6) "BIN6",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SIX_PLAN.PCN,'[,^<>|]','')),1,10) "PCN6",
				SUBSTR(WEGMANS.CLEAN_STRING_FORTENUP(REGEXP_REPLACE(SIX_TP.TPD_BENEFIT_GROUP_ID,'[,^<>|]','')),1,15) "BENEFIT_GROUP_ID6",
				SIX_PLAN.TPLD_PLAN_CODE "PLAN_CODE6",
				SIX_PLAN.TPLD_PLAN_NAME "PLAN_NAME6",
				DECODE(SIX_TP.TPD_RELATIONSHIP_NUM
									,1,'1=CARDHOLDER'
									,2,'2=SPOUSE'
									,3,'3=CHILD'
									,4,'4=OTHER'
									,0,'0=NOT SPECIFIED'
									,NULL) "RELATIONSHIP_CODE6",
				DECODE(SIX_TP.TPD_USE_FOR_COB,'Y',1,0) "COB6"

		FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT PATIENT

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_DEMOGRAPHIC PATIENTDEMO
		ON PATIENTDEMO.PATIENT_DEMOGRAPHIC_KEY = PATIENT.PATIENT_DEMOGRAPHIC_KEY

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_OPTION PATIENTOPT
		ON PATIENTOPT.PATIENT_OPTION_KEY = PATIENT.PATIENT_OPTION_KEY

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PATIENT FIRST_TP
		  ON FIRST_TP.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		  AND FIRST_TP.TPD_IS_ACTIVE = 'Y'
		  AND FIRST_TP.TPD_EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		  AND FIRST_TP.TPD_BILLING_ORDER = 1
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PLAN FIRST_PLAN
		  ON FIRST_PLAN.TPLD_PLAN_NUM = FIRST_TP.TPD_TP_PLAN_NUM

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PATIENT SEC_TP
		  ON SEC_TP.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		  AND SEC_TP.TPD_IS_ACTIVE = 'Y'
		  AND SEC_TP.TPD_EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		  AND SEC_TP.TPD_BILLING_ORDER = 2
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PLAN SEC_PLAN
		  ON SEC_PLAN.TPLD_PLAN_NUM = SEC_TP.TPD_TP_PLAN_NUM
  
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PATIENT TRE_TP
		  ON TRE_TP.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		  AND TRE_TP.TPD_IS_ACTIVE = 'Y'
		  AND TRE_TP.TPD_EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		  AND TRE_TP.TPD_BILLING_ORDER = 3
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PLAN TRE_PLAN
		  ON TRE_PLAN.TPLD_PLAN_NUM = TRE_TP.TPD_TP_PLAN_NUM

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PATIENT FOUR_TP
		  ON FOUR_TP.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		  AND FOUR_TP.TPD_IS_ACTIVE = 'Y'
		  AND FOUR_TP.TPD_EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		  AND FOUR_TP.TPD_BILLING_ORDER = 4
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PLAN FOUR_PLAN
		  ON FOUR_PLAN.TPLD_PLAN_NUM = FOUR_TP.TPD_TP_PLAN_NUM

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PATIENT FIVE_TP
		  ON FIVE_TP.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		  AND FIVE_TP.TPD_IS_ACTIVE = 'Y'
		  AND FIVE_TP.TPD_EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		  AND FIVE_TP.TPD_BILLING_ORDER = 5
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PLAN FIVE_PLAN
		  ON FIVE_PLAN.TPLD_PLAN_NUM = FIVE_TP.TPD_TP_PLAN_NUM

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PATIENT SIX_TP
		  ON SIX_TP.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		  AND SIX_TP.TPD_IS_ACTIVE = 'Y'
		  AND SIX_TP.TPD_EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		  AND SIX_TP.TPD_BILLING_ORDER = 6
		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.TP_PLAN SIX_PLAN
		  ON SIX_PLAN.TPLD_PLAN_NUM = SIX_TP.TPD_TP_PLAN_NUM
  
		LEFT OUTER JOIN {AUD}.ERXAUD_PLS_ARCHIVE_VIEW.PATIENT AUDPATIENT
		ON AUDPATIENT.PATIENT_NUM = PATIENT.PD_PATIENT_NUM
		AND TRUNC(AUDPATIENT.EFF_END_DATE, 'DAY') = TO_DATE('12/31/2999','MM/DD/YYYY')

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.FACILITY DWFACILITY
		ON AUDPATIENT.CREATE_FACILITY_NUM = DWFACILITY.FD_FACILITY_NUM

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_PHONE PHONE_CELL
		ON PHONE_CELL.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		AND PHONE_CELL.EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		AND PHONE_CELL.PAD_PATIENT_ADDRESS_KEY = 0
		AND PHONE_CELL.PATP_PHONE_USAGE = 16

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_PHONE PHONE_ALTONE
		ON PHONE_ALTONE.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		AND PHONE_ALTONE.EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		AND PHONE_ALTONE.PAD_PATIENT_ADDRESS_KEY = 0
		AND PHONE_ALTONE.PATP_PHONE_USAGE = 32

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_PHONE PHONE_ALTTWO
		ON PHONE_ALTTWO.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		AND PHONE_ALTTWO.EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		AND PHONE_ALTTWO.PAD_PATIENT_ADDRESS_KEY = 0
		AND PHONE_ALTTWO.PATP_PHONE_USAGE = 8

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_PHONE PHONE_ALTTHREE
		ON PHONE_ALTTHREE.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		AND PHONE_ALTTHREE.EFF_END_DATE = TO_DATE('12/31/2999','MM/DD/YYYY')
		AND PHONE_ALTTHREE.PAD_PATIENT_ADDRESS_KEY = 0
		AND PHONE_ALTTHREE.PATP_PHONE_USAGE = 64

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PATIENT_MEDICAL PMB
		ON PMB.PD_PATIENT_KEY = PATIENT.PD_PATIENT_KEY
		AND PMB.PMB_STATUS = 'A'
		--AND ROWNUM=1

		LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.MEDICAL_CONDITION MEDCOND
		ON MEDCOND.MCD_KEY = PMB.MCD_KEY


		WHERE PATIENT.PD_CURRENT_IND = '1'
     )
WHERE "LAST_UPDATE" = TO_NUMBER(TO_CHAR((:RUNDATE - 1)::DATE,'YYYYMMDD'))
   OR :RUNDATE = TO_DATE('20200101','YYYYMMDD')
--WHEN RUNDATE IS 1/1/2020 THEN THE WHOLE VIEW WILL RETURN.