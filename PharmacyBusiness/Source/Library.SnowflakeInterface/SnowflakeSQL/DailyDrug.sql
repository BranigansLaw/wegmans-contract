SELECT D.DRUG_NDC_MFG || '-' || D.DRUG_NDC_PRODUCT || '-' || D.DRUG_NDC_SIZE "NDC"
, D.DRUG_BRAND_NAME "DRUG_NAME"
, D.DRUG_LABELER "MANUFACTURER"
, D.DRUG_NDC_MFG "MFR_NUM"
, D.DRUG_STRENGTH "STRENGTH"
, D.DRUG_STRENGTH_UNITS "STRENGTH_UNITS"
, D.DRUG_IS_UNIT_DOSE "UNIT_DOSE_FLAG"
, D.DRUG_IS_UNIT_OF_USE "UNIT_OF_USE_FLAG"
, D.DRUG_PACKAGE_QUANTITY "PACKAGE_QTY"
, D.DRUG_PACKAGE_SIZE "PACK_SIZE"
, D.DRUG_INNER_PACKAGE "INNER_PACK"
, D.DRUG_OUTER_PACKAGE "OUTER_PACK"
, D.DRUG_CASE_SIZE "CASE_SIZE"
, D.DRUG_PACKAGE_UNITS "UNIT"
, P.PRD_DISPENSING_UNITS "DISPENSING_UNITS"
, D.DRUG_SHIPPER
, D.DRUG_PACKAGE_DESC "PACK_DESC"
, D.DRUG_NUM "ORDER_NUM"
, D.DRUG_PREVIOUS_NDC "PREV_NDC"
, D.DRUG_REPLACEMENT_NDC "REPLACEMENT_NDC"
, P.PRD_SOURCE_INDICATOR "PROD_SOURCE_IND"
, D.DRUG_IS_PROVIDER_DRUG "FDB_ADDED"
, TO_CHAR(D.DRUG_DATE_OF_ADD::DATE,'MM/DD/YYYY') "DATE_ADDED"
, TO_CHAR(D.DRUG_OBSOLETE_DATE::DATE,'MM/DD/YYYY') "OBSOLETE_DATE"
, TO_CHAR(P.PRD_DEACTIVATE_DATE::DATE,'MM/DD/YYYY HH:MI:SS AM') "DEACTIVATE_DATE"
, TO_CHAR(D.DRUG_LAST_PROVIDER_UPDATE::DATE,'MM/DD/YYYY') "LAST_PROVIDER_UPDATE"
, D.DRUG_IS_MAINT_DRUG "MAINTENANCE_DRUG_FLAG"
, D.DRUG_GNN "GENERIC_NAME"
, D.DRUG_GCN "GCN"
, D.DRUG_GCN_SEQ "GCN_SEQ_NUM"
, D.DRUG_UPC
, P.PRD_IS_GENERIC "SDGI" 
, P.IS_GENERIC_OVERRIDE "SDGI_OVERRIDE"
, P.PRD_PRODUCT_SCHEDULE "DRUG_SCHEDULE"
, D.DRUG_DEA_CLASS "DEA_CLASS"
, P.PRD_IS_PRICE_MAINTAINED "PRICE_MAINTAINED"
, PG.GROUP_NAME "GRP_NAME"
, PG.PRD_PRODUCT_KEY "PG_PRD_PRODUCT_KEY"
, PG.MEMBER_STATUS "PG_MEMBER_STATUS"
, GS.GRP_GROUP_NUM "GS_GRP_GROUP_NUM"
--, (SELECT TOP 1 SUBSTR(PG.GROUP_NAME, 1, 1)
--FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_GROUP PG
--WHERE PG.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
--AND PG.MEMBER_STATUS = 'ACTIVE'
--AND PG.PRODUCT_GROUP_NUM IN (1000012,1000013,1000014,1000015,1000016,1000017,1000018,1000019,1000020,1000021, --INCLUDE DECILES 0-9
--1000000,1000001,1000002,1000003,1000004,1000005,1000006,1000007,1000008,1000009) --AND DECILES A-J ONLY
--ORDER BY D.DRUG_NDC_MFG) "DECILE" - Move to C# logic if still needed by the business
, 'U' "DECILE"
, D.DRUG_AHFS "AHFS_THERAP_CLASS"
, D.DRUG_AHFS_DESCRIPTION "AHFS_THER_CLASS_DES_SHORT"
, D.DRUG_GC3 "AHFS_THER_CLASS_DES_LONG"
, D.DRUG_VERB "SIG_VERB"
, P.PRD_VERB_OVERRIDE "SIG_VERB_OVERRIDE"
, D.DRUG_ROUTE "SIG_ROUTE"
, SUBSTR(P.PRD_ROUTE_OVERRIDE, 1, 10) "SIG_ROUTE_OVERRIDE"
, D.DRUG_UNIT_LOW "SIG_UNIT"
, P.PRD_UNIT_OVERRIDE "SIG_UNIT_OVERRIDE"
, D.DRUG_DOSAGE_FORM "DOSAGE_FORM"
, D.DRUG_HCFA_DESI "DESI_INDICATOR"
, D.DRUG_ORANGE_BOOK_CODE "ORANGE_BOOK_CODE"
, P.PRD_HCFA_FDA_THERA_EQU_CODE "ORANGE_BOOK_CODE_OVERRIDE"
, P.PRD_DEFAULT_DAW_CODE "DEFAULT_DAW"
, P.PRD_IS_WAREHOUSED "WAREHOUSE_FLAG"
, D.DRUG_INNOVATOR "ORIGINATOR_INNOVATOR"
, P.PRD_IS_ERP_CANDIDATE "ENHANCED_REFILL_OPTIONAL"
, P.PRD_IS_GEN_PCK_SZ_RESTRICTED "GEN_SUB_PACK_RESTRICTION"
, P.PRD_MINIMUM_DISPENSE_QTY "MIN_DISP_QTY"
, PCFB.COST "BBAWP"
, P.PRD_DISTRIBUTOR "DISTRIBUTOR"
, P.PRD_HCPC_BBA_PRICE "BBAWP_OVERRIDE"
, P.PRD_IS_COMPOUND "COMPOUND_FLAG"
, P.PRD_ALTERNATE_LABEL_NAME "ALTERNATE_LABEL"
, P.PRD_IS_BLOCKED "BLOCKED_PRODUCT_FLAG"
, PCFR.COST "PCFR_COST"
, PCFC.COST "PCFC_COST"
, PCFN.COST "PCFN_COST"
, USERDEF.EFFECTIVE_DATE "USERDEF_EFF_DATE"
, NET.EFFECTIVE_DATE "NTE_EFF_DATE"
, CON.EFFECTIVE_DATE "CON_EFF_DATE"
, REPACKCON.EFFECTIVE_DATE "REPACKCON_EFF_DATE"
, P.PRD_PRODUCT_KEY "P_PRD_PRODUCT_KEY"

-- USE DECODES TO PULL THE APPROPRIATE COST FIELDS USING THE FOLLOWING ORDER OF PRECEDENCE:
-- REPACKCON, CON, NET, USERDEF
, (D.DRUG_PACKAGE_SIZE * DECODE(NVL(PCFR.COST, 0), 0, DECODE(NVL(PCFC.COST, 0), 0, DECODE(NVL(PCFN.COST, 0), 0, NVL(PCFU.COST, 0), PCFN.COST), PCFC.COST), PCFR.COST)) "COST"
, DECODE(NVL(PCFR.COST, 0), 0, DECODE(NVL(PCFC.COST, 0), 0, DECODE(NVL(PCFN.COST, 0), 0, NVL(USERDEF.IS_MANUALLY_MAINTAINED, ''), NET.IS_MANUALLY_MAINTAINED), CON.IS_MANUALLY_MAINTAINED), REPACKCON.IS_MANUALLY_MAINTAINED) "COST_MANUALLY_MAINTAINED"
, DECODE(NVL(PCFR.COST, 0), 0, DECODE(NVL(PCFC.COST, 0), 0, DECODE(NVL(PCFN.COST, 0), 0, NVL(USERDEF.PERCENT_MODIFIER, 0), NET.PERCENT_MODIFIER), CON.PERCENT_MODIFIER), REPACKCON.PERCENT_MODIFIER) "PERCENT_MODIFIER"
--, TO_CHAR((DECODE(NVL(PCFR.COST, 0), 0, DECODE(NVL(PCFC.COST, 0), 0, DECODE(NVL(PCFN.COST, 0), 0, NVL(USERDEF.EFFECTIVE_DATE, ''), NET.EFFECTIVE_DATE), CON.EFFECTIVE_DATE), REPACKCON.EFFECTIVE_DATE))::DATE,'MM/DD/YYYY HH:MI:SS AM') "COST_BASIS_EFF_DATE" - move logic to C# if still needed by business
, 'VARCHAR' "COST_BASIS_EFF_DATE"
--, (SELECT TOP 1 SUBSTR(PG.GROUP_NAME, 1, 1)
--FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_GROUP PG
--WHERE PG.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
--AND PG.MEMBER_STATUS = 'ACTIVE'
--AND PG.PRODUCT_GROUP_NUM IN (1000010, 1000011) -- S (SCAN OTC)
--ORDER BY D.DRUG_NDC_MFG) "OTC_TYPE" - Move to C# logic if still needed by the business
, 'U' "OTC_TYPE"
, DECODE(NVL(PCFR.COST, 0), 0, DECODE(NVL(PCFC.COST, 0), 0, DECODE(NVL(PCFN.COST, 0), 0, NVL(PCFU.COST, 0), PCFN.COST), PCFC.COST), PCFR.COST) "UNIT_COST"
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT P
INNER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.DRUG D ON (D.DRUG_NUM = P.PRD_DRUG_NUM)
-- RETRIEVE THE MAX PRODUCT_COST_BASIS_KEY FOR EACH COST TYPE FOR THE PRODUCT. THESE WILL BE USED TO RETRIEVE
-- THE DATA FIELDS FROM THE PRODUCT_COST_BASIS TABLE AND ARE NECESSARY BECAUSE THERE IS SOMETIMES MORE THAN
-- ONE ACTIVE RECORD FOR A GIVEN PRODUCT AND COST TYPE

LEFT OUTER JOIN
(SELECT PCB.PRD_PRODUCT_KEY,
MAX(DECODE(CB.COST_BASIS_NUM, 1000000, PCB.PRODUCT_COST_BASIS_KEY, 0)) KEYREPACKCON, -- 1000000 = REPACKCON - MCKESSON REPACKAGED CON
MAX(DECODE(CB.COST_BASIS_NUM, 1007, PCB.PRODUCT_COST_BASIS_KEY, 0)) KEYCON, -- 1007 = CON - CON (CONTRACT PRICE)
MAX(DECODE(CB.COST_BASIS_NUM, 1001, PCB.PRODUCT_COST_BASIS_KEY, 0)) KEYNET, -- 1001 = NET - NET (NET ITEM PRICE)
MAX(DECODE(CB.COST_BASIS_NUM, 1000001, PCB.PRODUCT_COST_BASIS_KEY, 0)) KEYUSERDEF, -- 1000001 = USER_DEF. - WEGMANS USER DEFINED COST
MAX(DECODE(CB.COST_BASIS_NUM, 1009, PCB.PRODUCT_COST_BASIS_KEY, 0)) KEYBBAWP -- 1009 = AWP - AWP (AVERAGE WHOLESALE PRICE)
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_BASIS PCB
INNER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.COST_BASIS CB ON (CB.COST_BASIS_KEY = PCB.COST_BASIS_KEY
AND SYSDATE() BETWEEN CB.EFF_START_DATE AND CB.EFF_END_DATE)
WHERE SYSDATE() BETWEEN PCB.EFFECTIVE_DATE AND NVL(PCB.TERMINATION_DATE, '31-DEC-2999')
AND CB.COST_BASIS_NUM IN (1000000, 1007, 1001, 1000001, 1009)
GROUP BY PCB.PRD_PRODUCT_KEY) PCBMAXKEYS ON (PCBMAXKEYS.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY)
-- RETRIEVE COST-RELATED FIELDS FOR REPACKCON COST TYPE
LEFT OUTER JOIN
(SELECT PERCENT_MODIFIER, IS_MANUALLY_MAINTAINED, COST_BASIS_SOURCE_KEY, PRODUCT_COST_BASIS_KEY, EFFECTIVE_DATE
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_BASIS) REPACKCON ON (REPACKCON.PRODUCT_COST_BASIS_KEY = PCBMAXKEYS.KEYREPACKCON)
-- RETRIEVE COST-RELATED FIELDS FOR CON COST TYPE
LEFT OUTER JOIN
(SELECT PERCENT_MODIFIER, IS_MANUALLY_MAINTAINED, COST_BASIS_SOURCE_KEY, PRODUCT_COST_BASIS_KEY, EFFECTIVE_DATE
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_BASIS) CON ON (CON.PRODUCT_COST_BASIS_KEY = PCBMAXKEYS.KEYCON)
-- RETRIEVE COST-RELATED FIELDS FOR NET COST TYPE
LEFT OUTER JOIN
(SELECT PERCENT_MODIFIER, IS_MANUALLY_MAINTAINED, COST_BASIS_SOURCE_KEY, PRODUCT_COST_BASIS_KEY, EFFECTIVE_DATE
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_BASIS) NET ON (NET.PRODUCT_COST_BASIS_KEY = PCBMAXKEYS.KEYNET)
-- RETRIEVE COST-RELATED FIELDS FOR USERDEF COST TYPE
LEFT OUTER JOIN
(SELECT PERCENT_MODIFIER, IS_MANUALLY_MAINTAINED, COST_BASIS_SOURCE_KEY, PRODUCT_COST_BASIS_KEY, EFFECTIVE_DATE
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_BASIS) USERDEF ON (USERDEF.PRODUCT_COST_BASIS_KEY = PCBMAXKEYS.KEYUSERDEF)
-- RETRIEVE COST-RELATED FIELDS FOR BBAWP COST TYPE
LEFT OUTER JOIN
(SELECT COST_BASIS_SOURCE_KEY, PRODUCT_COST_BASIS_KEY
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_BASIS) BBAWP ON (BBAWP.PRODUCT_COST_BASIS_KEY = PCBMAXKEYS.KEYBBAWP)
-- RETRIEVE THE MAX COST_BASIS_SOURCE_VALUE_NUM FOR EACH COST TYPE FOR THE PRODUCT. THESE WILL BE USED TO RETRIEVE
-- THE DATA FIELDS FROM THE PRODUCT_COST_FACT TABLE AND ARE NECESSARY BECAUSE THERE IS SOMETIMES MORE THAN
-- ONE ACTIVE RECORD FOR A GIVEN PRODUCT AND COST TYPE
LEFT OUTER JOIN -- REPACKCON
(SELECT PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY, MAX(COST_BASIS_SOURCE_VALUE_NUM) COST_BASIS_SOURCE_VALUE_NUM
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT
WHERE SYSDATE() BETWEEN EFFECTIVE_DATE AND NVL(TERMINATION_DATE, '31-DEC-2999')
GROUP BY PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY) PCFKEYREPACKCON
ON (PCFKEYREPACKCON.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFKEYREPACKCON.COST_BASIS_SOURCE_KEY = REPACKCON.COST_BASIS_SOURCE_KEY)
LEFT OUTER JOIN -- CON
(SELECT PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY, MAX(COST_BASIS_SOURCE_VALUE_NUM) COST_BASIS_SOURCE_VALUE_NUM
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT
WHERE SYSDATE() BETWEEN EFFECTIVE_DATE AND NVL(TERMINATION_DATE, '31-DEC-2999')
GROUP BY PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY) PCFKEYCON
ON (PCFKEYCON.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFKEYCON.COST_BASIS_SOURCE_KEY = CON.COST_BASIS_SOURCE_KEY)
LEFT OUTER JOIN -- NET
(SELECT PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY, MAX(COST_BASIS_SOURCE_VALUE_NUM) COST_BASIS_SOURCE_VALUE_NUM
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT
WHERE SYSDATE() BETWEEN EFFECTIVE_DATE AND NVL(TERMINATION_DATE, '31-DEC-2999')
GROUP BY PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY) PCFKEYNET
ON (PCFKEYNET.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFKEYNET.COST_BASIS_SOURCE_KEY = NET.COST_BASIS_SOURCE_KEY)
LEFT OUTER JOIN -- USERDEF
(SELECT PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY, MAX(COST_BASIS_SOURCE_VALUE_NUM) COST_BASIS_SOURCE_VALUE_NUM
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT
WHERE SYSDATE() BETWEEN EFFECTIVE_DATE AND NVL(TERMINATION_DATE, '31-DEC-2999')
GROUP BY PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY) PCFKEYUSERDEF
ON (PCFKEYUSERDEF.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFKEYUSERDEF.COST_BASIS_SOURCE_KEY = USERDEF.COST_BASIS_SOURCE_KEY)
LEFT OUTER JOIN -- BBAWP
(SELECT PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY, MAX(COST_BASIS_SOURCE_VALUE_NUM) COST_BASIS_SOURCE_VALUE_NUM
FROM {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT
WHERE SYSDATE() BETWEEN EFFECTIVE_DATE AND NVL(TERMINATION_DATE, '31-DEC-2999')
GROUP BY PRD_PRODUCT_KEY, COST_BASIS_SOURCE_KEY) PCFKEYBBAWP
ON (PCFKEYBBAWP.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFKEYBBAWP.COST_BASIS_SOURCE_KEY = BBAWP.COST_BASIS_SOURCE_KEY)
-- RETRIEVE REPACKCON COST RECORD
LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT PCFR ON (PCFR.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFR.COST_BASIS_SOURCE_VALUE_NUM = PCFKEYREPACKCON.COST_BASIS_SOURCE_VALUE_NUM
AND SYSDATE() BETWEEN PCFR.EFFECTIVE_DATE AND NVL(PCFR.TERMINATION_DATE, '31-DEC-2999'))
-- RETRIEVE CON COST RECORD
LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT PCFC ON (PCFC.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFC.COST_BASIS_SOURCE_VALUE_NUM = PCFKEYCON.COST_BASIS_SOURCE_VALUE_NUM
AND SYSDATE() BETWEEN PCFC.EFFECTIVE_DATE AND NVL(PCFC.TERMINATION_DATE, '31-DEC-2999'))
-- RETRIEVE NET COST RECORD
LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT PCFN ON (PCFN.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFN.COST_BASIS_SOURCE_VALUE_NUM = PCFKEYNET.COST_BASIS_SOURCE_VALUE_NUM
AND SYSDATE() BETWEEN PCFN.EFFECTIVE_DATE AND NVL(PCFN.TERMINATION_DATE, '31-DEC-2999'))
-- RETRIEVE USERDEF COST RECORD
LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT PCFU ON (PCFU.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFU.COST_BASIS_SOURCE_VALUE_NUM = PCFKEYUSERDEF.COST_BASIS_SOURCE_VALUE_NUM
AND SYSDATE() BETWEEN PCFU.EFFECTIVE_DATE AND NVL(PCFU.TERMINATION_DATE, '31-DEC-2999'))
-- RETRIEVE BBAWP COST RECORD
LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_COST_FACT PCFB ON (PCFB.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND PCFB.COST_BASIS_SOURCE_VALUE_NUM = PCFKEYBBAWP.COST_BASIS_SOURCE_VALUE_NUM
AND SYSDATE() BETWEEN PCFB.EFFECTIVE_DATE AND NVL(PCFB.TERMINATION_DATE, '31-DEC-2999'))

LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.PRODUCT_GROUP PG ON (PG.PRD_PRODUCT_KEY = P.PRD_PRODUCT_KEY
AND P.ERX_CLIENT_ID = PG.ERX_CLIENT_ID)

LEFT OUTER JOIN {DW}.ERXDW_PLS_ARCHIVE_VIEW.GROUPS GS ON (GS.GRP_GROUP_KEY = PG.GRP_GROUP_KEY)

-- 07/27/2011 ADDING THE FOLLOWING EXCLUSIONS PER JOHN CULHANE, DAVE PERLMAN, AND JUDY STUFF TO PREVENT
-- ISSUES WITH DUPLICATES IN THE RX.DRUG TABLE LOAD:
-- OBSOLETE/DEACTIVATED MORE THAN 2 YEARS AGO, BLOCKED PRODUCTS, CORPORATELY ADDED PRODUCTS THAT
-- HAVE BEEN DEACTIVATED, AND NDC 99999-9999-99
WHERE NVL(D.DRUG_OBSOLETE_DATE, '31-DEC-2999') > DATEADD(DAY, -730, SYSDATE())
AND NVL(P.PRD_DEACTIVATE_DATE, '31-DEC-2999') > DATEADD(DAY, -730, SYSDATE())
AND NVL(P.PRD_IS_BLOCKED, 'N') <> 'Y'
AND NOT(P.PRD_DEACTIVATE_DATE IS NOT NULL AND P.PRD_SOURCE_INDICATOR = 'CORPORATE')
AND D.DRUG_NDC_MFG || D.DRUG_NDC_PRODUCT || D.DRUG_NDC_SIZE <> '99999999999'
-- MANUFACTURER EXCLUSION LIST PROVIDED BY JOHN CULHANE
-- AND ROW_NUMBER() OVER (ORDER BY D.DRUG_NDC_MFG) <= 110000
-- AND D.DRUG_BRAND_NAME IS NOT NULL
--AND (D.DRUG_NDC_MFG = '00000' AND D.DRUG_NDC_PRODUCT = '0000') --AND D.DRUG_NDC_SIZE = '00')
AND D.DRUG_NDC_MFG NOT IN (
00247,
00363,
00440,
00490,
00615,
11917,
12280,
16590,
16881,
19458,
21140,
21695,
23490,
24385,
33358,
34575,
35356,
37205,
40986,
49002,
49614,
49999,
50428,
51655,
52959,
53265,
54569,
54868,
55045,
55289,
55887,
57866,
58016,
58864,
63874,
65243,
66116,
66267,
66336,
67544,
68016,
68030,
68071,
68094,
68115,
68258,
68387,
91899
)
ORDER BY D.DRUG_BRAND_NAME