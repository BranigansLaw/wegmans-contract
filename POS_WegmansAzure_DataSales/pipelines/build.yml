parameters:
  - name: project
    type: string

  - name: id
    type: string

  - name: artifact
    type: string
    default: ''

  - name: configuration
    type: string
    default: Release
    values:
    - Release
    - Debug

  - name: zipAfterPublish
    type: boolean
    default: false
    
jobs:
- job: build_${{ parameters.id }}
  displayName: Build ${{ parameters.id }}

  pool:
    vmImage: windows-latest

  variables:
    BUILD_CONFIGURATION: ${{ parameters.configuration }}
  
  steps:
    - checkout: self

    #Dump all environment variables to the log
    - task: CmdLine@2
      inputs:
        script: 'cmd /k set'

    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 6.x

    - task: UseDotNet@2
      displayName: Setting DotNet version
      inputs:
        packageType: sdk
        includePreviewVersions: true
        version: 6.x
        
    - task: NuGetAuthenticate@1
     
    - pwsh: dotnet restore ${{ parameters.project }} --configfile ./nuget.config

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: ${{ parameters.project }}
        arguments: >-
          --configuration $(BUILD_CONFIGURATION)
          --no-incremental

    - task: DotNetCoreCLI@2
      displayName: Unit Test
      inputs:
        command: test
        projects: Wegmans.POS.DataHub/*.UnitTests/*.csproj
        arguments: >-
          --configuration $(BUILD_CONFIGURATION)
          --collect:"XPlat Code Coverage" 
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
  
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        projects: ${{ parameters.project }}
        arguments: >-
          --configuration $(BUILD_CONFIGURATION)
          --output $(Build.ArtifactStagingDirectory)
          --no-build
          --no-restore
        zipAfterPublish: ${{ parameters.zipAfterPublish }}
        publishWebProjects: false

    - publish: $(Build.ArtifactStagingDirectory)      
      artifact: ${{ coalesce(parameters.artifact, parameters.id) }}