//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstuteAttachmentService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/", ConfigurationName="AstuteAttachmentService.ICaseStreamService")]
    public interface ICaseStreamService
    {
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.AstuteSolutions.com/integration/2010/04/ICaseStreamService/UploadF" +
            "ile", ReplyAction="http://schemas.AstuteSolutions.com/integration/2010/04/ICaseStreamService/UploadF" +
            "ileResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<AstuteAttachmentService.FileResponse> UploadFileAsync(AstuteAttachmentService.FileRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
    public enum FileMethodType
    {
        
        /// <remarks/>
        Upload,
        
        /// <remarks/>
        UploadAutoName,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
    public enum FilePathType
    {
        
        /// <remarks/>
        Attachments,
        
        /// <remarks/>
        InfoCenter,
        
        /// <remarks/>
        Letters,
        
        /// <remarks/>
        StandardLetters,
        
        /// <remarks/>
        Enclosures,
        
        /// <remarks/>
        Fulfillment,
        
        /// <remarks/>
        Logs,
        
        /// <remarks/>
        Temp,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
    public enum ValidState
    {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Ok,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        Warning,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileRequest", WrapperNamespace="http://schemas.AstuteSolutions.com/integration/2010/04/", IsWrapped=true)]
    public partial class FileRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string FileSize;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string ID;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public AstuteAttachmentService.FileMethodType Method;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string Overwrite;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string Password;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string Prefix;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public AstuteAttachmentService.FilePathType ServerPath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string SourceFileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string UserLanguageID;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string UserName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/")]
        public string company_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public FileRequest()
        {
        }
        
        public FileRequest(string FileSize, string ID, AstuteAttachmentService.FileMethodType Method, string Overwrite, string Password, string Prefix, AstuteAttachmentService.FilePathType ServerPath, string SourceFileName, string UserLanguageID, string UserName, string company_id, System.IO.Stream FileByteStream)
        {
            this.FileSize = FileSize;
            this.ID = ID;
            this.Method = Method;
            this.Overwrite = Overwrite;
            this.Password = Password;
            this.Prefix = Prefix;
            this.ServerPath = ServerPath;
            this.SourceFileName = SourceFileName;
            this.UserLanguageID = UserLanguageID;
            this.UserName = UserName;
            this.company_id = company_id;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileResponse", WrapperNamespace="http://schemas.AstuteSolutions.com/integration/2010/04/", IsWrapped=true)]
    public partial class FileResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/", Order=1)]
        public int FileSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.AstuteSolutions.com/integration/2010/04/", Order=2)]
        public AstuteAttachmentService.ValidState Valid;
        
        public FileResponse()
        {
        }
        
        public FileResponse(string FileName, int FileSize, AstuteAttachmentService.ValidState Valid)
        {
            this.FileName = FileName;
            this.FileSize = FileSize;
            this.Valid = Valid;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ICaseStreamServiceChannel : AstuteAttachmentService.ICaseStreamService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CaseStreamServiceClient : System.ServiceModel.ClientBase<AstuteAttachmentService.ICaseStreamService>, AstuteAttachmentService.ICaseStreamService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CaseStreamServiceClient() : 
                base(CaseStreamServiceClient.GetDefaultBinding(), CaseStreamServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICaseStreamService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CaseStreamServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CaseStreamServiceClient.GetBindingForEndpoint(endpointConfiguration), CaseStreamServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CaseStreamServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CaseStreamServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CaseStreamServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CaseStreamServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CaseStreamServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<AstuteAttachmentService.FileResponse> UploadFileAsync(AstuteAttachmentService.FileRequest request)
        {
            return base.Channel.UploadFileAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICaseStreamService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICaseStreamService))
            {
                return new System.ServiceModel.EndpointAddress("https://socialconnect.myastutesolutions.com/WegmansPharmaTrainAIS/CaseStreamServi" +
                        "ce.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CaseStreamServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICaseStreamService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CaseStreamServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICaseStreamService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICaseStreamService,
        }
    }
}
